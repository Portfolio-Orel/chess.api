service: chess-api
frameworkVersion: "3"

custom:
  myStage: ${opt:stage, self:provider.stage}
  myProfile: 
    prod: ChessApp
    dev: ChessApp
  
  secrets:
    prod: ${file(secrets_dev.json)}
    dev: ${file(secrets_dev.json)}
  
  serverless-offline:
    httpPort: 4000
    websocketPort: 4001
    lambdaPort: 4002
  
  DB_NAME: ${file(./secrets_${self:custom.myStage}.json):DB_NAME}
  USERNAME: ${file(./secrets_${self:custom.myStage}.json):DB_USERNAME}
  PASSWORD: ${file(./secrets_${self:custom.myStage}.json):DB_PASSWORD}
  POSTGRESQL:
    HOST:
      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
    PORT:
      Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]

provider:
  name: aws
  stage: dev
  runtime: nodejs16.x
  profile: ${self:custom.myProfile.${self:custom.myStage}}
  timeout: 60

  iam:
    role: LambdaRole

  environment:
    DB_NAME: ${self:custom.secrets.${self:custom.myStage}.DB_NAME}
    DB_USERNAME: ${self:custom.secrets.${self:custom.myStage}.DB_USERNAME}
    DB_PASSWORD: ${self:custom.secrets.${self:custom.myStage}.DB_PASSWORD}
    DB_HOST: ${self:custom.secrets.${self:custom.myStage}.DB_HOST}
    DB_PORT: ${self:custom.secrets.${self:custom.myStage}.DB_PORT}

functions:
  ## Users ##
  get_user:
    handler: src/api/users.getUser
    events:
      - httpApi:
          path: /users/{user_id}
          method: get

  get_user_by_email:
    handler: src/api/users.getUserByEmail
    events:
      - httpApi:
          path: /users/email/{email}
          method: get
      
  get_user_by_phone_number:
    handler: src/api/users.getUserByPhoneNumber
    events:
      - httpApi:
          path: /users/phone_number/{phone_number}
          method: get

  create_user:
    handler: src/api/users.createUser
    events:
      - httpApi:
          path: /users
          method: post

  ## Users ##

  ## Events ##
  get_event:
    handler: src/api/events.getEvent
    events:
      - httpApi:
          path: /events/{event_id}
          method: get
  get_all_events:
    handler: src/api/events.getAllEvents
    events:
      - httpApi:
          path: /events
          method: get
  
  create_event:
    handler: src/api/events.createEvent
    events:
      - httpApi:
          path: /events
          method: post
  update_event:
    handler: src/api/events.updateEvent
    events:
      - httpApi:
          path: /events/{event_id}
          method: put
  delete_event:
    handler: src/api/events.deleteEvent
    events:
      - httpApi:
          path: /events/{event_id}
          method: delete

  register_to_event:
    handler: src/api/events.registerToEvent
    events:
      - httpApi:
          path: /events/{event_id}/register
          method: post
          
  ## Events ##

  ## Payments ##
  get_payment_form:
    handler: src/api/payment.getPaymentForm
    events:
      - httpApi:
          path: /payment/{event_id}
          method: get

  on_payment_success:
    handler: src/api/payment.onPaymentSuccess
    events:
      - httpApi:
          path: /payment/success
          method: post

  on_payment_fail:
    handler: src/api/payment.onPaymentFail
    events:
      - httpApi:
          path: /payment/fail
          method: post

  ## Payments ##

  ## Events Participants ##
  get_event_participant:
    handler: src/api/events_participants.getEventParticipant
    events:
      - httpApi:
          path: /participants/{event_id}/{participant_id}
          method: get

  get_all_event_participants:
    handler: src/api/events_participants.getEventParticipants
    events:
      - httpApi:
          path: /participants/{event_id}/{page_number}/{page_size}
          method: get
    
  get_events_participants:
    handler: src/api/events_participants.getAllEventsParticipants
    events:
      - httpApi:
          path: /participants/event_ids
          method: get
      

  add_event_participants:
    handler: src/api/events_participants.addEventParticipants
    events:
      - httpApi:
          path: /participants/{event_id}
          method: post

  delete_event_participants:
    handler: src/api/events_participants.deleteEventParticipants
    events:
      - httpApi:
          path: /participants/{event_id}/participant_ids
          method: delete
  ## Events Participants ##
  
  ## Chess User Data ##
  get_chess_user_data:
    handler: src/api/chess_user_data.getChessUserData
    events:
      - httpApi:
          path: /chess_user_data/{user_id}
          method: get

  create_chess_user_data:
    handler: src/api/chess_user_data.createChessUserData
    events:
      - httpApi:
          path: /chess_user_data
          method: post

  update_chess_user_data:
    handler: src/api/chess_user_data.updateChessUserData
    events:
      - httpApi:
          path: /chess_user_data/{user_id}
          method: put
  ## Chess User Data ##

  ## Games ##
  get_games:
    handler: src/api/games.getGames
    events:
      - httpApi:
          path: /games
          method: get
  create_game:
    handler: src/api/games.createGame
    events:
      - httpApi:
          path: /games
          method: post
  delete_game:
    handler: src/api/games.deleteGame
    events:
      - httpApi:
          path: /games/{game_id}
          method: delete

  ## Auth ##
  createAuthChallenge:
    handler: src/api/auth.createAuthChallenge
    events:
      - httpApi:
          path: /auth/create_auth_challenge
          method: post

  defineAuthChallenge:
    handler: src/api/auth.defineAuthChallenge
    events:
      - httpApi:
          path: /auth/define_auth_challenge
          method: post

  verifyAuthChallengeResponse:
    handler: src/api/auth.verifyAuthChallengeResponse
    events:
      - httpApi:
          path: /auth/verify_auth_challenge_response
          method: post
  ## Auth ##

resources:
  Resources:
    sendSMSRole: 
      Type: AWS::IAM::Role
      Properties:
        RoleName: sendSMSRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: sendSMSRolePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "sns:Publish"
                  Resource:
                    - "arn:aws:sns:*:*:*"
    LambdaRole: ${file(./resource/LambdaRole.yml)}
    PostgreSqlRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        MasterUsername: ${self:custom.USERNAME}
        MasterUserPassword: ${self:custom.PASSWORD}
        AllocatedStorage: 20
        DBName: ${self:custom.DB_NAME}
        DBInstanceClass: db.t3.micro
        Engine: postgres
        PubliclyAccessible: true

plugins:
  - serverless-offline